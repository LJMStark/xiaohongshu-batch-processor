---
description: 项目依赖和环境配置规则
---

# 项目依赖和环境配置

## Python环境要求

- **Python版本**: 3.7+
- **推荐版本**: Python 3.9 或 3.10
- **操作系统**: macOS, Windows, Linux

## 核心依赖包

### requirements.txt
```txt
# 图像处理
opencv-python>=4.5.0
numpy>=1.19.0
Pillow>=8.0.0

# 文档处理  
python-docx>=0.8.11

# API集成
openai>=1.0.0
requests>=2.25.0

# 环境配置
python-dotenv>=0.19.0

# 工具库
pathlib2>=2.3.6  # Python < 3.4 兼容
typing-extensions>=4.0.0  # 类型注解支持
```

### 可选依赖
```txt
# 开发工具
black>=22.0.0          # 代码格式化
flake8>=4.0.0          # 代码检查
pytest>=6.0.0          # 单元测试

# 性能优化
numba>=0.56.0          # JIT编译加速
```

## 环境配置文件

### .env 模板
```env
# OpenRouter API配置
OPENROUTER_API_KEY=your_api_key_here

# 可选配置
HTTP_REFERER=https://your-site.com
X_TITLE=小红书内容处理工具

# 处理配置
MAX_RETRIES=3
DEFAULT_FILTER=natural
BORDER_SIZE=20
OUTPUT_FORMAT=jpg
```

### .gitignore
```gitignore
# 环境配置
.env
.env.local
.env.*.local

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# 输出文件
filtered_images/
output/
processed/
*.log

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# 系统文件
.DS_Store
Thumbs.db
```

## 安装和配置步骤

### 1. 环境准备
```bash
# 创建虚拟环境（推荐）
python -m venv venv

# 激活虚拟环境
# Windows
venv\Scripts\activate
# macOS/Linux  
source venv/bin/activate

# 升级pip
python -m pip install --upgrade pip
```

### 2. 安装依赖
```bash
# 安装核心依赖
pip install -r requirements.txt

# 或逐个安装
pip install opencv-python numpy python-docx openai requests python-dotenv
```

### 3. 配置API密钥
```bash
# 复制环境配置模板
cp .env.example .env

# 编辑配置文件
# 在 .env 文件中设置你的 OPENROUTER_API_KEY
```

## 常见问题解决

### OpenCV安装问题
```bash
# macOS
brew install opencv

# Ubuntu/Debian
sudo apt-get install python3-opencv

# 如果pip安装失败，尝试
pip install opencv-python-headless
```

### 中文字体问题
```bash
# 确保系统安装了中文字体
# macOS: 系统自带
# Windows: 系统自带  
# Linux: 
sudo apt-get install fonts-noto-cjk
```

### 文档处理问题
```bash
# 如果python-docx安装失败
pip install --upgrade setuptools wheel
pip install python-docx
```

## 开发环境配置

### VS Code配置 (.vscode/settings.json)
```json
{
    "python.defaultInterpreterPath": "./venv/bin/python",
    "python.formatting.provider": "black",
    "python.linting.enabled": true,
    "python.linting.flake8Enabled": true,
    "files.exclude": {
        "**/__pycache__": true,
        "**/*.pyc": true,
        ".env": true
    }
}
```

### 代码格式化配置 (pyproject.toml)
```toml
[tool.black]
line-length = 88
target-version = ['py37', 'py38', 'py39', 'py310']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''
```

## 部署和分发

### 创建可执行程序
```bash
# 使用PyInstaller打包
pip install pyinstaller
pyinstaller --onefile --windowed batch_processor.py
```

### Docker配置 (可选)
```dockerfile
FROM python:3.9-slim

WORKDIR /app
COPY requirements.txt .
RUN pip install -r requirements.txt

COPY . .
CMD ["python", "batch_processor.py"]
```