---
description: 图像处理和批量操作规则
globs: *.py
---

# 图像处理规则

基于[改图片.py](mdc:改图片.py)的图像处理功能规范。

## 核心功能模块

### 1. 滤镜系统 (`apply_filter`)

支持的滤镜类型：
- `natural`: 自然滤镜（默认）- 增强对比度和饱和度
- `warm`: 暖色调 - 增加红色通道
- `cool`: 冷色调 - 增加蓝色通道  
- `soft`: 柔和效果 - 高斯模糊混合
- `bright`: 明亮效果 - 增加亮度和对比度
- `clarity`: 清晰效果 - 锐化滤镜
- `grayscale`: 灰度效果
- `negative`: 负片效果

### 2. 图像裁剪 (`crop_bottom`)

- 保留图像上方的19/20部分
- 裁剪掉底部1/20部分
- 用于去除水印或不需要的底部内容

### 3. 边框添加 (`add_border`)

- 默认边框大小：20像素
- 默认边框颜色：白色 (255, 255, 255)
- 使用 `cv2.BORDER_CONSTANT` 模式

## 批量处理流程 (`batch_apply_filter`)

### 处理步骤
1. 遍历根目录下所有子文件夹
2. 跳过已存在的 `filtered_images` 文件夹
3. 检测支持的图像格式：`.png`, `.jpg`, `.jpeg`, `.bmp`, `.tiff`
4. 为每个包含图像的文件夹创建 `filtered_images` 输出目录
5. 依次处理：滤镜 → 裁剪 → 边框
6. 保存为JPEG格式到输出目录

### 错误处理
- 使用 `cv2.imdecode` 和 `np.fromfile` 处理中文文件名
- 对每个图像文件单独进行异常处理
- 记录处理成功和失败的统计信息
- 继续处理其他文件，不因单个文件失败而中断

### 文件命名和保存
- 保持原始文件名
- 统一输出为JPEG格式（`.jpg`）
- 使用 `cv2.imencode` 和二进制写入确保兼容性

## 图像处理最佳实践

### 内存管理
- 处理大图像时注意内存使用
- 及时释放不需要的图像数组
- 使用适当的图像压缩质量

### 颜色空间处理
- BGR ↔ HSV 转换用于颜色调整
- BGR ↔ GRAY 转换用于灰度处理
- 确保颜色值在有效范围内 (0-255)

### 数组操作安全
- 使用 `np.clip()` 防止像素值溢出
- 检查图像数组的有效性 (`image is None`)
- 正确处理不同的图像通道数

## 配置参数

```python
# 推荐的默认配置
filter_type = "natural"      # 滤镜类型
border_size = 20            # 边框大小
border_color = (255, 255, 255)  # 白色边框
```

## 支持格式

### 输入格式
- JPEG (.jpg, .jpeg)
- PNG (.png) 
- BMP (.bmp)
- TIFF (.tiff)

### 输出格式  
- 统一输出为JPEG格式
- 确保跨平台兼容性

## 性能优化

- 批量处理时显示进度信息
- 并行处理多个文件夹（可扩展）
- 跳过已处理的文件夹避免重复工作